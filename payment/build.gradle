plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
}

group = 'com.eminyidle'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-neo4j'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '3.2.5'
	implementation group: 'org.json', name: 'json', version: '20231013'
	implementation "org.springframework.boot:spring-boot-starter-data-mongodb"
	implementation 'org.apache.kafka:kafka-streams'
	implementation 'org.springframework.kafka:spring-kafka'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: "com.vaadin.external.google", module:"android-json"
	}
	testImplementation 'org.springframework.batch:spring-batch-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
//	testImplementation "org.testcontainers:testcontainers:1.19.8"
//	testImplementation "org.testcontainers:junit-jupiter:1.19.8"
//	testImplementation 'org.testcontainers:jdbc:1.19.8'
//	testImplementation "org.testcontainers:mariadb:1.19.8"
//	testImplementation "org.testcontainers:mongodb:1.19.8"
}

jacoco {
	toolVersion = "0.8.10" // https://www.jacoco.org/jacoco/trunk/doc/changes.html
}

jacocoTestReport {
	dependsOn test
	reports {
		html.required = true
		xml.required = true
	}
	afterEvaluate {
		classDirectories.setFrom(
				// 그 외의 매칭되는 클래스도 제외 대상
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
							"**/*Application*",
							"**/*Config*",
							"**/*Req*",
							"**/*Res*",
							"**/*Message*",
							"**/*Interceptor*",
							"**/*Exception*"
					])
				})
		)
	}
	// 리포트 생성 후 커버리지 체크
	finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			// rule 활성화
			enabled = true

			// 클래스 단위로 룰 체크
			element = 'CLASS'

			// 라인 커버리지를 최소 80% 만족
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.00
			}

			// 제거 대상 지정
			excludes = [
					"**.*Application*",
					"**.*Config*",
					"**.*Dto*",
					"**.*Req",
					"**.*Res",
					"**.*Message",
					"**.*Interceptor*",
					"**.*Exception*"
			]
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
	// test 수행 이후 리포트 생성
	finalizedBy jacocoTestReport
}
